Unfortunately I did not allocate enough time to this assignment, and have run out of time. As with previous assignments, I began by reading through the project description so as to understand the intended outcome and submission requirements. I then read through the notes provided by the instructor to refresh my memory on the subject, and use these notes to better understand the sample code provided by the instructor.

Upon reading through the notes and the sample code, I realized that the majority of the sample would actually be beneficial to this program, and so I began by copying those pieces already written for me. I placed the include statements at the top of ast.hpp (as this file is included in both ast.cpp and main.cpp), added the global variable definitions underneath the include statements in ast.hpp, and then added the function declarations to the end of ast.hpp. The actual function definitions I added to the end of ast.cpp, and the main function I used to replace the main function in main.cpp.

The next steps would be to edit the existing AST function declarations to replace all instances of GV with LLVM objects to begin outputing the LLVM IR code, which appears to be a 1:1 replacement in each of the AST functions (though of course the real trick would be to use the correct LLVM function borrowed from the instructor's code). Following this, the majority of the work would be done and I could then have the program output object code, and generally implement the remaining grading criteria. I originally did not intend to implement optimization, but that appears to be a moot point.

The primary issue I ran into is exactly how different LLVM is from standard C++, and I did not expect to run into such a steep learning curve when writing this assignment. I am going to continue to work on this assignment even past the due date so that I might understand the IR aspect of a compiler, as I find the subject rather interesting and have quite enjoyed the class so far.
